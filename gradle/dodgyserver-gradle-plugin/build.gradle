/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'groovy'
    id 'idea'
    id 'maven'
    id 'codenarc'
    id 'application'
    id "com.gradle.plugin-publish" version "0.9.1"
}

import org.slf4j.Logger
import org.slf4j.LoggerFactory

Logger slf4jLogger = LoggerFactory.getLogger('some-logger')
slf4jLogger.info('An info log message logged using SLF4j')

dependencies {
    compile gradleApi()
    compile localGroovy()

    //gradleApi drags this in
    //compile "org.apache.httpcomponents:httpcore:4.2.2"

    testCompile('org.spockframework:spock-core:1.0-groovy-2.3') {
        exclude group:'org.codehaus.groovy'
    }


}

repositories {
    jcenter()
}

project.version = '0.1'
project.group = 'name.dickinson.duncan'

project.mainClassName = 'name.dickinson.duncan.dodgyserver.DodgyServer'
run {
    args = ['--dir=src/test/resources/site']
}

pluginBundle {
    website = 'https://github.com/dedickinson/dodgyserver-gradle-plugin'
    vcsUrl = 'https://github.com/dedickinson/dodgyserver-gradle-plugin'
    description = 'Provides a very dodgy GET-only HTTP server for checking things like jbake-generated sites'
    tags = ['http', 'jbake', 'dodgy']

    plugins {
        dodgyServerPlugin {
            id = 'name.dickinson.duncan.dodgyserver'
            displayName = 'Dodgy HTTP GET server'
        }
    }
}

project.codenarc.toolVersion = 0.24

codenarcMain {
    ignoreFailures false
    configFile file('config/codenarc/codenarc.groovy')
    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 50
}


codenarcTest {
    ignoreFailures true
    configFile file('config/codenarc/codenarc.groovy')
    maxPriority1Violations 0
    maxPriority2Violations 10
    maxPriority3Violations 20
}

//see: https://issues.gradle.org/browse/GRADLE-1715
task listTestLibs << {
    println 'Testing:'
    configurations.testCompile.files.each {
        println it
    }
}

task listCompileLibs << {
    configurations.compile.files.each {
        println it
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/test/resources"
}
processTestResources.dependsOn copyTestResources


test {
    testLogging {
        showStandardStreams = true
        events "started", "passed", "skipped", "failed"
        //logging.captureStandardOutput LogLevel.INFO
        //logging.captureStandardError LogLevel.DEBUG
    }
}

